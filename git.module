<?php
/**
 * @file Git module, imports git history into drupal
 */

function git_nodeinfo() {
  return array(
    'git_commit' => array(
      'name' => t('Git Commit'),
      'module' => 'git',
      'description' => t("A commit on a git repo"),
      'has_title' => TRUE,
      'title_label' => t('Commit'),
      'has_body' => FALSE,
      'locked' => TRUE,
    )
  );
}


function git_commit_info() {
  return t('A commit in a git repo');
}



/**
 * Implementation of hook_nodeapi().
 */
function git_nodeapi(&$node, $op, $teaser, $page) {
  if (!isset($node->nid)) {
    return;
  }

  switch ($op) {
    case 'delete':
      //delete where there is no node.. THIS WON'T SCALE
      //how to get around drupal's lack of referential integrity?
      db_query('DELETE FROM {git_commits} WHERE nid =%d);', $node->nid);
    break;
    case 'view':
      if($node->type == 'git_commit') {
	git_commit_view($node, $teaser, $page);
      }
    break;
  }
}

function git_commit_view($node, $teaser, $page) {
//   drupal_set_message(__FUNCTION__);
  $commit = git_get_commit_from_nid($node->nid);
  $repos = get_repos_from_commit($commit->commitid);
  if (!count($repos)) {
    drupal_set_message(t("This commit is not in any repo we know of"), 'error');
  }
  else {
//     drupal_set_message(print_r($repos, 1));

    foreach($repos as $r) {
      $repo_list[] = l(check_plain($r->title), 'gitrepo/'. $r->repoid);
    }
    $node->content['repos'] = array(
      '#value' => theme('item_list', $repo_list),
    );

    drupal_set_message($repos[0]->location);
    $git = git_get_git($repos[0]);
  }
  if ($git) {
    $show = $git->getCommand('show');
    $show->addArgument($commit->hash);
    $result = $show->execute();

    $node->content['show'] = array('#value' => nl2br($result));
  }
  return $node;
}

function get_repos_from_commit($commitid) {
  $result = db_query("SELECT * FROM {git_commit_repo} gcr INNER JOIN {git_repos} gr ON gr.repoid = gcr.repoid WHERE commitid=%d", $commitid);
  $repos = array();
  while($repos[] = db_fetch_object($result));
  return $repos;
}

function git_get_git($repo) {
  try {
    //load the pear module
    require_once 'VersionControl/Git.php';
    $git = new VersionControl_Git($repo->location);

    return $git;
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return false;
  }
  
}

function git_commit_form(&$form_state, $node) {
  
}

/**
 * Implementation of hook_menu()
 */
function git_menu() {
  $items['admin/settings/git'] = array(
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'git_admin',
    'access arguments' => array('Edit git repos'),
    'title' => 'Git',
  );
  $items['admin/settings/git/add'] = array(
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('git_admin_add_form'),
    'access arguments' => array('Edit git repos'),
    'title' => 'Add'
  );

  $items['admin/settings/git/parsenow'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'git_parse_now',
    'page arguments' => array(4),
    'access arguments' => array('Edit git repos'),
  );

  return $items;
}

function git_get_commit_from_nid($nid) {
  return db_fetch_object(db_query("SELECT * FROM {git_commits} WHERE nid=%d", $nid));
}

function git_parse_now($repoid) {
  $repo = _git_get_repo($repoid);
  if (!$repo) {
    drupal_set_message("Invalid repo", 'error');
    return '';
  }

  try {
  //load the pear module
  require_once 'VersionControl/Git.php';
  $git = new VersionControl_Git($repo->location);
  $commits = $git->getCommits();

  foreach($commits as $c) {
    unset($node);
    $existing = _git_get_commit($c->getTree());

    if ($existing) {
      drupal_set_message("Existing node:" . l($c->getTree(), 'node/'. $existing->nid));
      $gerund->commitid = $existing->commitid;
    }
    else {
      $node->title = $c->getTree();
      $node->type = 'git_commit';
      $node->created = $c->getCreatedAt();

      //TODO somethign more sensible here
      GLOBAL $user;
      $node->uid = $user->uid;

      node_save($node);
      
      $commit->hash = $c->getTree();
      $commit->author = $c->getAuthor();
      $commit->message = $c->getMessage();
      
      $commit->nid = $node->nid;
      drupal_write_record('git_commits', $commit);
      drupal_set_message("New node:". l($c->getTree(), 'node/'. $node->nid));

      $gerund->commitid = db_last_insert_id('git_commits');
    }
    $gerund->repoid = $repoid;

    drupal_write_record('git_commit_repo', $gerund);
  }

  }
  catch (Exception $e) {
    return $e->getMessage();
  }
  return '';
}

function _git_get_commit($hash) {
  return db_fetch_object(db_query("SELECT * FROM {git_commits} WHERE hash='%s'", $hash));

}

function _git_get_repo($repoid) {
  return db_fetch_object(db_query("SELECT * FROM {git_repos} WHERE repoid=%d", $repoid));
}

function git_admin() {
  $output = '';


  $output .= l('Add git repo', 'admin/settings/git/add');

  $headers = array('Title');
  $result = db_query("SELECT * FROM {git_repos}");
  $rows = array();
  while($g = db_fetch_object($result)) {
    $rows[] = array(
      l($g->title, 'admin/settings/git/edit/'. $g->repoid),
      l(t('Parse now'), 'admin/settings/git/parsenow/'. $g->repoid),
    );
  }
  $output .= theme('table', $headers, $rows);
  return $output;
}

function git_admin_add_form() {
  $form = git_admin_repo_form();
  $form['save'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

function git_admin_repo_form() {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => true,
  );

  $form['location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location'),
    '#description' => t('Path to checkout on server\'s filesystem'),
    '#required' => true,
  );


  return $form;
}

function git_admin_add_form_submit($form_id, &$form_state) {
  $repo->title = $form_state['values']['title'];
  $repo->location = $form_state['values']['location'];
  drupal_write_record('git_repos', $repo);
  drupal_goto('admin/settings/git');
}