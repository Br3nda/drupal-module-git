<?php

function git_nodeinfo() {
  return array(
    'git_commit' => array(
      'name' => t('Git Commit'),
      'module' => 'git',
      'description' => t("A commit on a git repo"),
      'has_body' => FALSE,
      )
    );
}

function git_menu() {
  $items['admin/settings/git'] = array(
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'git_admin',
    'access arguments' => array('Edit git repos'),
    'title' => 'Git',
  );
  $items['admin/settings/git/add'] = array(
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('git_admin_add_form'),
    'access arguments' => array('Edit git repos'),
    'title' => 'Add'
  );

  $items['admin/settings/git/parsenow'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'git_parse_now',
    'page arguments' => array(4),
    'access arguments' => array('Edit git repos'),
  );

  return $items;
}

function git_parse_now($repoid) {
  $repo = _git_get_repo($repoid);
  if (!$repo) {
    drupal_set_message("Invalid repo", 'error');
    return '';
  }

  try {
  //load the pear module
  require_once 'VersionControl/Git.php';
  $git = new VersionControl_Git($repo->location);
  $commits = $git->getCommits();

  foreach($commits as $c) {
    unset($node);
    $existing = _git_get_commit($c->getTree());

    if ($existing) {
      drupal_set_message("Existing node:" . l($c->getTree(), 'node/'. $existing->nid));
    }
    else {
      $node->title = $c->getTree();
      $node->type = 'git_commit';
      $node->created = $c->getCreatedAt();

      node_save($node);
      $commit->hash = $c->getTree();
      $commit->author = $c->getAuthor();
      $commit->message = $c->getMessage();
      
      $commit->nid = $node->nid;
      drupal_write_record('git_commits', $commit);
      drupal_set_message("New node:". l($c->getTree(), 'node/'. $node->nid));
    }
  }

  }
  catch (Exception $e) {
    return $e->getMessage();
  }
  return '';
}

function _git_get_commit($hash) {
  return db_fetch_object(db_query("SELECT * FROM {git_commits} WHERE hash='%s'", $hash));
}

function _git_get_repo($repoid) {
  return db_fetch_object(db_query("SELECT * FROM {git_repos} WHERE repoid=%d", $repoid));
}

function git_admin() {
  $output = '';


  $output .= l('Add git repo', 'admin/settings/git/add');

  $headers = array('Title');
  $result = db_query("SELECT * FROM {git_repos}");
  $rows = array();
  while($g = db_fetch_object($result)) {
    $rows[] = array(
      l($g->title, 'admin/settings/git/edit/'. $g->repoid),
      l(t('Parse now'), 'admin/settings/git/parsenow/'. $g->repoid),
    );
  }
  $output .= theme('table', $headers, $rows);
  return $output;
}

function git_admin_add_form() {
  $form = git_admin_repo_form();
  $form['save'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

function git_admin_repo_form() {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => true,
  );

  $form['location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location'),
    '#description' => t('Path to checkout on server\'s filesystem'),
    '#required' => true,
  );

  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Url'),
    '#description' => t('Unique machine readable name, for the url'),
    '#required' => true,
  );

  return $form;
}

function git_admin_add_form_submit($form_id, &$form_state) {
  $repo->title = $form_state['values']['title'];
  $repo->location = $form_state['values']['location'];
  $repo->url = $form_state['values']['url'];
  drupal_write_record('git_repos', $repo);
  drupal_goto('admin/settings/git');
}