<?php
/**
 * @file Git module, imports git history into drupal
 */

function git_node_info() {
//   drupal_set_message(__FUNCTION__);
  return array(
    'gitcommit' => array(
      'name' => t('Git Commit'),
      'module' => 'git',
      'description' => t("A commit on a git repo"),
      'has_title' => TRUE,
      'title_label' => t('Commit'),
      'has_body' => FALSE,
      'locked' => TRUE,
    )
  );
}


function gitcommit_info() {
  return t('A commit in a git repo');
}

/**
 * Implementation of hook_perm().
 */
function git_perm() {
  return array('Edit git repos');
}


/**
 * Implementation of hook_nodeapi().
 */
function git_nodeapi(&$node, $op, $teaser, $page) {
//   drupal_set_message(__FUNCTION__);
// 
  if (!preg_match('!^git!', $node->type)) {
    return;
  }

  switch ($op) {
    case 'delete':
      //delete where there is no node.. THIS WON'T SCALE
      //how to get around drupal's lack of referential integrity?
      db_query('DELETE FROM {git_commits} WHERE nid =%d;', $node->nid);
    break;
    case 'view':
      if($node->type == 'gitcommit') {
	gitcommit_view($node, $teaser, $page);
      }
    break;
    case 'load':
      if($node->type == 'gitcommit') {
        gitcommit_load($node);
      }
    break;
  }
}

function gitcommit_load(&$node) {
  $node->commit = git_get_commit_from_nid($node->nid);
  $node->repos = git_get_repos_from_commit($node->commit->commitid);

}

function gitcommit_view($node, $teaser, $page) {
//   drupal_set_message(__FUNCTION__);
  $commit = git_get_commit_from_nid($node->nid);
  $repos = $node->repos;
  if (!count($repos)) {
    drupal_set_message(t("This commit is not in any repo we know of"), 'error');
  }
  else {

    drupal_set_message(print_r($repos, 1));

    foreach($repos as $r) {
      $repo_list[] = print_r($r, 1); //l(check_plain($r->title), 'gitrepo/'. $r->repoid);
    }
    $node->content['repos'] = array(
      '#value' => theme('item_list', $repo_list),
    );

// //     drupal_set_message($repos[0]->location);
    $git = git_get_git($repos[0]);
  }

  $node->content['author'] = array(
    '#value' => check_plain($node->commit->author)
  );

  $node->content['message'] = array(
    '#value' => check_plain($node->commit->message)
  );


//   if ($git) {
//     $show = $git->getCommand('show');
//     $show->setArgument($commit->hash);
//     $result = $show->execute();

//     $node->content['show'] = array('#value' => nl2br($result));
//   }
  return $node;
}

function git_get_repos_from_commit($commitid) {
  $result = db_query("SELECT * FROM {git_commit_repo} gcr INNER JOIN {git_repos} gr ON gr.repoid = gcr.repoid WHERE commitid=%d", $commitid);
  $repos = array();
  while($repos[] = db_fetch_object($result));
  return $repos;
}

function git_get_git($repo) {
  if (!$repo->location) {
    drupal_set_message("Invalid repo", 'error');
    return false;
  }
  try {
    //load the pear module
    require_once 'VersionControl/Git.php';
    $git = new VersionControl_Git($repo->location);

    return $git;
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return false;
  }
  
}

// function gitcommit_form(&$form_state, $node) {
//   $form = array();
//   $form['repo'] = array(
//     '#type' => 'select',
//   );
//   return $form;
// }

/**
 * Implementation of hook_menu()
 */
function git_menu() {
  $items['admin/settings/git'] = array(
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'git_admin',
    'access arguments' => array('Edit git repos'),
    'title' => 'Git',
  );
  $items['admin/settings/git/add'] = array(
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('git_admin_add_form'),
    'access arguments' => array('Edit git repos'),
    'title' => 'Add'
  );

  $items['admin/settings/git/parsenow'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'git_parse_now',
    'page arguments' => array(4),
    'access arguments' => array('Edit git repos'),
  );

  return $items;
}

function git_get_commit_from_nid($nid) {
  return db_fetch_object(db_query("SELECT * FROM {git_commits} WHERE nid=%d", $nid));
}

function git_parse_now($repoid) {
  $result = db_query("SELECT * FROM {git_repos}");
  while($r = db_fetch_object($result)) {
    $operations[] = array('git_parse_batch', array($r));
  }

  $batch = array(
    'title' => t('Importing Commits'),
    'operations' => $operations,
    'finished' => 'git_parse_batch_finished.',
//     'file' => 'path_to_file_containing_myfunctions',
  );
  batch_set($batch);

  // only needed if not inside a form _submit handler :
  batch_process();
}

function git_count_commits($repo, $branch='master') {
  $git = git_get_git($repo);
  $command = $git->getCommand('log');
  $command->setOption('format' , 'oneline');
  $log = $command->execute();
  return substr_count($log, "\n");
}

function git_parse_batch($repo, &$context) {
  $git = git_get_git($repo);
  error_log('==================================');
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 1;
//     $context['sandbox']['offset'] = 0;
    $total_commits = git_count_commits($repo);
    
    $context['sandbox']['max'] = $total_commits;
    error_log("=============== Total commits = $total_commits");
  }

  //load the pear module
  require_once 'VersionControl/Git.php';
  $git = new VersionControl_Git($repo->location);

  $num_per_run = 2;
  $offset = $context['sandbox']['progress'];
  error_log("getting $num_per_run commits, offset $offset");
  $commits = $git->getCommits('master', $num_per_run, $offset);

  foreach($commits as $c) {
    unset($node); unset($gerund);
    error_log($c->getMessage());

    $context['sandbox']['progress']++;
    $existing = _git_get_commit($c->getTree());

    if ($existing) {
      error_log("Existing node: node/". $existing->nid);
      $gerund->commitid = $existing->commitid;
      $gerund->repoid = $repoid;
      drupal_write_record('git_commit_repo', $gerund);
    }
    else {
      $node->title = $c->getTree();
      $node->type = 'gitcommit';
      $node->created = $c->getCreatedAt();

      //TODO somethign more sensible here
      GLOBAL $user;
      $node->uid = $user->uid;

      node_save($node);
      
      $commit->hash = $c->getTree();
      $commit->author = $c->getAuthor();
      $commit->message = $c->getMessage();
      $commit->nid = $node->nid;

      

      $commit->created_at = strtotime($c->getCreatedAt());
      drupal_write_record('git_commits', $commit);
      
      error_log(print_r($commit, 1));
      error_log("New node: node/". $node->nid);

      $gerund->commitid = $commit->commitid;
      $gerund->repoid = $repo->repoid;
      drupal_write_record('git_commit_repo', $gerund);

    }

//     error_log('created: '. $c->getCreatedAt());

 
    $context['results'][] = $c->getTree() . ' - ' . check_plain($c->getMessage());    
    sleep(4);
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function git_parse_batch_finished() {
  if ($success) {
    $message = format_plural(count($results), 'One post processed.', '@count posts processed.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
  // Providing data for the redirected page is done through $_SESSION.
  foreach ($results as $result) {
    $items[] =  $result;
  }
  $_SESSION['my_batch_results'] = $items;
  return '';
}

function _git_get_commit($hash) {
  return db_fetch_object(db_query("SELECT * FROM {git_commits} WHERE hash='%s'", $hash));

}

function _git_get_repo($repoid) {
  return db_fetch_object(db_query("SELECT * FROM {git_repos} WHERE repoid=%d", $repoid));
}

function git_admin() {
  $output = '';


  $output .= l('Add git repo', 'admin/settings/git/add');

  $headers = array('Title');
  $result = db_query("SELECT * FROM {git_repos}");
  $rows = array();
  while($g = db_fetch_object($result)) {
    $rows[] = array(
      l($g->title, 'admin/settings/git/edit/'. $g->repoid),
      l(t('Parse now'), 'admin/settings/git/parsenow/'. $g->repoid),
    );
  }
  $output .= theme('table', $headers, $rows);
  return $output;
}

function git_admin_add_form() {
  $form = git_admin_repo_form();
  $form['save'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

function git_admin_repo_form() {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => true,
  );

  $form['location'] = array(
    '#type' => 'textfield',
    '#title' => t('Location'),
    '#description' => t('Path to checkout on server\'s filesystem'),
    '#required' => true,
  );


  return $form;
}

// function git_admin_add_form_submit($form_id, &$form_state) {
//   $repo->title = $form_state['values']['title'];
//   $repo->location = $form_state['values']['location'];
//   drupal_write_record('git_repos', $repo);
//   drupal_goto('admin/settings/git');
// }